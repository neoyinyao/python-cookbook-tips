python采用垃圾回收机制做内存管理，垃圾回收机制的算法包括引用计数（reference counting）、标记清除（mark and sweep）、分代回收（generation collect）

1.python的对象和引用相分离，在程序执行过程中，python会记录每个对象的引用次数，当引用次数为0时，会被回收，引用计数实现简单，并且将垃圾回收的时间随机，分摊时间，但是引用计数
会存在循环引用的问题
2.针对循环引用问题，python利用标记清除算法解决，python中的循环引用只存在容器对象上（包括类），通过构建两个双向链表，objects to scan,unreachable,
其中，scan链表存储每个容器的引用次数ref_count和副本gc_ref，首先遍历scan链表，将容器的引用对象的gc_ref-1,然后再次遍历scan链表，将gc_ref为0的容器对象从scan链表中删除并
加入到unreachable链表中，对于gc_ref不为0的容器对象，遍历其所有引用，将在unreachable中的对象删除并添加到scan链表中。
mark and sweep算法执行时，其他程序都不能执行，因此会损失程序运行效率。
循环引用的另一个解决方案是弱引用，即weakref，弱引用不会增加对象的引用次数，在OrderDict中有应用。

3. 分代回收算法的目的是提高垃圾回收的效率，思想是，如果一个对象多次未被回收，则该对象对程序来说较为重要，被回收的可能性较小，分代回收算法将所有对象分为0，1，2三个级别，级别高的对象
被回收扫描的频率低。
